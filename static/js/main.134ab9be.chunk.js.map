{"version":3,"sources":["pages/HomePage.jsx","pages/PrivatePage.jsx","App.js","serviceWorker.js","index.js"],"names":["HomePage","console","log","this","props","history","className","onClick","push","React","Component","PrivatePage","params","token","localStorage","getItem","hide","App","path","component","Private","Home","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"0TAqBeA,G,6KAhBPC,QAAQC,IAAI,UAAWC,KAAKC,OADvB,IAEHC,EAAYF,KAAKC,MAAjBC,QACR,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,4BACEC,QAAW,kBAAMF,EAAQG,KAAK,cADhC,4B,GAPeC,IAAMC,YCgCdC,G,wDA/BX,WAAYC,GAAQ,IAAD,sBACf,cAAMA,GACN,IAAMC,EAAQC,aAAaC,QAAQ,SAFpB,OAGfd,QAAQC,IAAI,WAAYW,GAHT,E,qDAkBf,IAAMA,EAAQC,aAAaC,QAAQ,SACnCd,QAAQC,IAAI,WAAYW,GACxB,IAAIG,EAAO,KAMX,OAJIA,EADS,OAAVH,EACS,6BAAK,8CAEL,6BAAK,2EAET,6BAAMG,O,GA3BIP,IAAMC,YCcjBO,MAXf,WACE,OACE,yBAAKX,UAAU,OACf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOY,KAAK,WAAWC,UAAWC,IAClC,kBAAC,IAAD,CAAOF,KAAK,IAAIC,UAAWE,OCC3BC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BxC,QAAQC,IACN,iHAKE4B,GAAUA,EAAOY,UACnBZ,EAAOY,SAASP,KAMlBlC,QAAQC,IAAI,sCAGR4B,GAAUA,EAAOa,WACnBb,EAAOa,UAAUR,WAO5BS,OAAM,SAAAC,GACL5C,QAAQ4C,MAAM,4CAA6CA,M,YCzFjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACA,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGFC,SAASC,eAAe,SDSnB,SAAkBpB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,GAAwB5B,OAAOC,SAAS4B,MACpDC,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,QAAQ,WAC9B,IAAM1B,EAAK,UAAMuB,GAAN,sBAEP9B,IAgEV,SAAiCO,EAAOC,GAEtC0B,MAAM3B,EAAO,CACX4B,QAAS,CAAE,iBAAkB,YAE5BvB,MAAK,SAAAwB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C/B,UAAUC,cAAc+B,MAAM7B,MAAK,SAAAC,GACjCA,EAAa6B,aAAa9B,MAAK,WAC7BV,OAAOC,SAASwC,eAKpBrC,EAAgBC,EAAOC,MAG1Bc,OAAM,WACL3C,QAAQC,IACN,oEAvFAgE,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAM7B,MAAK,WACjCjC,QAAQC,IACN,iHAMJ0B,EAAgBC,EAAOC,OC/B/BE,K","file":"static/js/main.134ab9be.chunk.js","sourcesContent":["import React from 'react';\nimport './Home.css';\n\nclass HomePage extends React.Component {\n    render (){\n        console.log('pros ->', this.props)\n  const { history } = this.props\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <button\n          onClick = {() => history.push('/private')}\n        >\n          Go to private page\n        </button>\n      </header>\n    </div>\n  );\n}\n}\n\nexport default HomePage;\n","import React from 'react'\nimport './Private.css'\n\nclass PrivatePage extends React.Component {\n    constructor(params){\n        super(params)\n        const token = localStorage.getItem('token');\n        console.log('token =>', token)\n        if(token === null) {\n            // window.location = 'https://singhealthid.azurewebsites.net/connect/token'\n        }\n    }\n    // componentWillMount() {\n    // }\n    // componentDidMount() {\n    //     const token = localStorage.getItem('token');\n    //     console.log('token cdm =>', token)\n    //     if(token === '') {\n    //         window.location = 'https://singhealthid.azurewebsites.net/connect/token'\n    //     }\n    // }\n    render() {\n        const token = localStorage.getItem('token');\n        console.log('token =>', token)\n        var hide = null\n        if(token === null) {\n            hide = (<div><h1>Unauthorized!</h1></div>)\n        }else {\n            hide = (<div><h1>You are authorized. This is a private page</h1></div>)\n        }\n        return (<div>{hide}</div>)\n    }\n\n}\n\nexport default PrivatePage;","import React from 'react';\nimport './App.css';\nimport { Switch, Route } from 'react-router-dom';\nimport Home from './pages/HomePage'\nimport Private from './pages/PrivatePage'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Switch>\n      <Route path=\"/private\" component={Private} />\n      <Route path=\"/\" component={Home} />\n    </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n  <Router>\n    <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}